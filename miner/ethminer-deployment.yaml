apiVersion: apps/v1
kind: Deployment
metadata:
  name: ethminer
spec:
  strategy:
    type: Recreate
  # Replicas controls the number of instances of the Pod to maintain running at all times
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: ethminer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ethminer
    spec:
      containers:
        - name: miner
          image: fish2/docker-ethminer:latest
          args: ["--api-bind", "3333", "-P", "stratum://0x6ce0a4ce16ab8916af9ec6f811ad410966f0ee80.atlantic-cloud-test@us1.ethermine.org:4444"]
          ports:
            - name: api
              containerPort: 3333
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 3333
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 3333
            initialDelaySeconds: 5
            periodSeconds: 10

          resources:
            requests:
              cpu: 500m # The CPU unit is mili-cores. 500m is 0.5 cores
              memory: 64Mi
            limits:
              cpu: 2000m
              memory: 512Mi
              # GPUs can only be allocated as a limit, which both reserves and limits the number of GPUs the Pod will have access to
              # Making individual Pods resource light is advantageous for bin-packing. In the case of Ethminer, running a single GPU
              # per Pod would work well and often be preferred. In this example we use 2 GPUs per pod to showcase the flexibility
              # of GPU allocation.
              nvidia.com/gpu: 2

      # Node affinity can be used to require / prefer the Pods to be scheduled on a node with a specific hardware type
      # No affinity allows scheduling on all hardware types that can fulfill the resource request.
      # In this example, without affinity, any NVIDIA GPU would be allowed to run the Pod.
      # Read more about affinity at: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity:
        nodeAffinity:
          # This will REQUIRE the Pod to be run on a system with a multi purpose NVIDIA Pascal series GPU
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: gpu.nvidia.com/class
                operator: In
                values:
                  - NV_Pascal
                  - Tesla_V100

          # As mining doesn't require much CPU and very little network connectivity, we try to play nice and only schedule
          # the Pod on systems with Celeron family CPUs and 1G network connections. This is a preference, not a requirement.
          # If systems with Celeron CPUs and/or 1G ethernet are not available to fulfill the requested resources, the Pods
          # will be scheduled on higher end systems.
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                - key: ethernet.coreweave.cloud/speed
                  operator: In
                  values:
                    - 1G

      restartPolicy: Always
