apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: "finetune-"
spec:
  entrypoint: main
  arguments:
    parameters:
    # run_name should be unique on a per-run basis, especially if reporting
    # to wandb or sharing PVCs between runs.
    - name: run_name
    - name: pvc
      value: 'finetune-data'
    # Training parameters. Model IDs are hugging face IDs to pull down, or
    # a path to your model relative to the PVC root.
    - name: model
      value: 'EleutherAI/gpt-neo-2.7B'
    # The directory to read your dataset in, and tokenize for training.
    - name: dataset
      value: 'dataset'
    # Whether to retokenize the data on each run. It is strongly recommended to
    # NOT enable this if you are making multiple runs on the same dataset.
    - name: retokenize
      value: 'false'
    # How should the tokenizer order the dataset inputs? Options available are:
    # `size_ascending`, `size_descending`, `name_ascending`, `name_descending`,
    # `random`, and `none`. `shuffle` implements `none` while also assigning 
    # chunks randomly to file instead of sequentially, useful for large
    # sequential datasets like novels.
    - name: reorder
      value: 'none'
    # What % of chunks to throw out, to reduce redundancy 
    # (randomly throws them out)
    # valid values are between 0-100, 100 disables argument
    - name: sampling
      value: 100
    # eot and pad tokens, it is suggested not to change this value, but usual
    # values are `<|padding|>` or `<|endoftext|>`
    - name: eot_token
      value: ''
    - name: pad_token
      value: ''
    # The token that marks a boundary - if the end of a `context` is reached,
    # and the rest of the range cannot fit in the remainder of a context, the
    # range is allowed to fill out the current `context`, and then the entire
    # range is used to start the next `context`.
    - name: boundary_token
      value: '\n'
    # The context size to train. Most models have a default maximum of `2048`, but
    # this can be adjusted downwards. This is most useful when the text you're
    # training on is divided along logical boundaries and is split using
    # `boundary_token`.
    - name: context
      value: '2048'
    # Model training parameters
    - name: train_ratio
      value: '0.9'
    # Batch size. `-1` will let it do a reasonable and relatively conservative
    # guess.
    - name: batch_size
      value: '-1'
    # Force `fp16` precision mode. By default, we train in the precision the
    # model provides as configuration option. But for less memory, and thus
    # faster training because of batch size, you might try this. This will
    # not work well with models such as Fairseq.
    - name: force_fp16
      value: false
    # The batch size quotient for the batch size guess.
    - name: batch_size_divisor
      value: '1.0'
    - name: random_seed
      value: '42'
    # Learn rate, increase or decrease as needed.
    - name: learn_rate
      value: '5e-5'
    # Number of epochs, the number of times it will go through your dataset.
    - name: epochs
      value: '1'
    # The number of gradient checkpoint layers to work through on each batch.
    - name: gradients
      value: '5'
    # ZeRO optimizer stage -- ref: https://arxiv.org/abs/1910.02054
    - name: zero_stage
      value: '3'
    # Whether to *not* resume from checkpoints.
    - name: no_resume
      value: false
    # Where we store our training logs on the PVC.
    - name: logs
      value: 'logs'
    # Project reporting/id
    - name: wandb_key
      value: ''
    - name: project_id
      value: 'huggingface'
    # Inference service configuration.
    - name: run_inference
      value: false
    # Skip dataset download, tokenization, and training to only run inference, presumably
    # you have a model already ready to go under `model_run` name.
    - name: inference_only
      value: false
    # Download a dataset of Western Romance books from SmashWords.com
    - name: download_dataset
      value: false
    # CoreWeave region to default to; ORD1 has most of the GPUs.
    - name: region
      value: 'ORD1'
    # Training GPU - A40, 48gb VRAM
    - name: trainer_gpu
      value: 'A40'
    # Inference GPU - RTX A5000, 24gb VRAM
    - name: inference_gpu
      value: 'RTX_A5000'
    # Container images -- generally, don't alter this.
    - name: model_downloader_image
      value: 'ghcr.io/wbrown/gpt_bpe/model_downloader'
    - name: model_downloader_tag
      value: 'e2ef65f'
    - name: dataset_downloader_image
      value: 'ghcr.io/coreweave/dataset-downloader/smashwords-downloader'
    - name: dataset_downloader_tag
      value: '7dba2c7'
    - name: tokenizer_image
      value: 'ghcr.io/wbrown/gpt_bpe/dataset_tokenizer'
    - name: tokenizer_tag
      value: 'baa7df3'
    - name: finetuner_image
      value: 'docker.io/gooseai/finetuner'
    - name: finetuner_tag
      value: 'rc57'
    - name: inference_image
      value: 'coreweave/ml-images'
    - name: inference_tag
      value: 'pytorch-huggingface-81d5ce11'

  templates:
  - name: main
    steps:
    - - name: model-downloader
        template: model-downloader
        arguments:
          parameters:
            - name: model
              value: "{{workflow.parameters.model}}"
            - name: dest
              value: "/{{workflow.parameters.pvc}}/models/{{workflow.parameters.model}}"

    - - name: dataset-downloader
        template: dataset-downloader
        arguments:
          parameters:
            - name: output
              value: "/{{workflow.parameters.pvc}}/{{workflow.parameters.dataset}}"
        when: "{{workflow.parameters.inference_only}} == false && {{workflow.parameters.download_dataset}} == true"

    - - name: tokenizer
        template: model-tokenizer
        arguments:
          parameters:
          - name: input
            value: "/{{workflow.parameters.pvc}}/{{workflow.parameters.dataset}}"
          - name: output
            value: "/{{workflow.parameters.pvc}}/{{workflow.parameters.dataset}}-{{=sprig.replace('/', '_', sprig.replace('.','_', sprig.replace('-','_', workflow.parameters.model)))}}-{{workflow.parameters.context}}-{{workflow.parameters.tokenizer_tag}}.tokens"
          - name: model
            value: "/{{workflow.parameters.pvc}}/models/{{workflow.parameters.model}}"
          - name: context
            value: "{{workflow.parameters.context}}"
          - name: eot
            value: "{{workflow.parameters.eot_token}}"
          - name: pad
            value: "{{workflow.parameters.pad_token}}"
          - name: boundary
            value: "{{workflow.parameters.boundary_token}}"
          - name: reorder
            value: "{{workflow.parameters.reorder}}"
          - name: sampling
            value: "{{workflow.parameters.sampling}}"
          - name: retokenize
            value: "{{workflow.parameters.retokenize}}"
        when: "{{workflow.parameters.inference_only}} == false"

    - - name: finetuner
        template: model-finetuner
        arguments:
          parameters:
          - name: finetuner_params
            # Pass the params in as one string so we can template in the conditional flags
            value: >-
              --run_name {{workflow.parameters.run_name}}
              --model /{{workflow.parameters.pvc}}/models/{{workflow.parameters.model}}
              --dataset /{{workflow.parameters.pvc}}/{{workflow.parameters.dataset}}-{{=sprig.replace('/', '_', sprig.replace('.','_', sprig.replace('-','_', workflow.parameters.model)))}}-{{workflow.parameters.context}}-{{workflow.parameters.tokenizer_tag}}.tokens
              --eot '{{workflow.parameters.eot_token}}'
              --pad '{{workflow.parameters.pad_token}}'
              --bs {{workflow.parameters.batch_size}}
              --seed {{workflow.parameters.random_seed}}
              --lr {{workflow.parameters.learn_rate}}
              --tr {{workflow.parameters.train_ratio}}
              --output /{{workflow.parameters.pvc}}/finetunes/
              --cache /{{workflow.parameters.pvc}}/cache/
              --logs /{{workflow.parameters.pvc}}/{{workflow.parameters.logs}}
              --bs_divisor {{workflow.parameters.batch_size_divisor}}
              --gradients {{workflow.parameters.gradients}}
              --zero_stage {{workflow.parameters.zero_stage}}
              --no_resume {{workflow.parameters.no_resume}}
              --project_id {{workflow.parameters.project_id}}
              --epochs {{workflow.parameters.epochs}}
              --context_size {{workflow.parameters.context}}
              {{=workflow.parameters.force_fp16 == 'true' ? '--fp16' : ''}}
          - name: wandb_key
            value: "{{workflow.parameters.wandb_key}}"
          - name: torch_cache
            value: "/{{workflow.parameters.pvc}}/torch/"
        when: "{{workflow.parameters.inference_only}} == false"

    - - name: inference-service
        template: model-inference-service
        arguments:
          parameters:
            - name: model_path
              value: "finetunes/results-{{workflow.parameters.run_name}}"
        when: "{{workflow.parameters.run_inference}} == true"

  - name: model-downloader
    inputs:
      parameters:
        - name: model
        - name: dest
    retryStrategy:
      limit: 1
    container:
      image: "{{workflow.parameters.model_downloader_image}}:{{workflow.parameters.model_downloader_tag}}"
      command: [ "/ko-app/model_downloader" ]
      args: [ "-model", "{{inputs.parameters.model}}",
              "-dest", "{{inputs.parameters.dest}}" ]
      resources:
        requests:
          memory: 512Mi
          cpu: "2"
        limits:
          memory: 512Mi
          cpu: "2"
      volumeMounts:
        - mountPath: "/{{workflow.parameters.pvc}}"
          name: "{{workflow.parameters.pvc}}"
    volumes:
      - name: "{{workflow.parameters.pvc}}"
        persistentVolumeClaim:
           claimName: "{{workflow.parameters.pvc}}"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: topology.kubernetes.io/region
              operator: In
              values:
              - "{{workflow.parameters.region}}"

  - name: dataset-downloader
    inputs:
      parameters:
        - name: output
    retryStrategy:
      limit: 1
    # The dataset downloader runs as the nonroot user so the dataset folder in the PVC
    # needs the correct permissions.
    initContainers:
      - name: dataset-perms
        image: alpine:3.17
        command: [ "/bin/sh" ]
        args:
          - "-c"
          - "mkdir -p {{inputs.parameters.output}};
            chmod o+rw,g+s {{inputs.parameters.output}}"
        mirrorVolumeMounts: true
    container:
      image: "{{workflow.parameters.dataset_downloader_image}}:{{workflow.parameters.dataset_downloader_tag}}"
      args: ["--data_dir", "{{inputs.parameters.output}}"]
      resources:
        requests:
          memory: 256Mi
          cpu: "4"
        limits:
          memory: 256Mi
          cpu: "4"
      volumeMounts:
        - mountPath: "/{{workflow.parameters.pvc}}"
          name: "{{workflow.parameters.pvc}}"
    volumes:
      - name: "{{workflow.parameters.pvc}}"
        persistentVolumeClaim:
           claimName: "{{workflow.parameters.pvc}}"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: topology.kubernetes.io/region
              operator: In
              values:
              - "{{workflow.parameters.region}}"

  - name: model-tokenizer
    inputs:
      parameters:
        - name: input
        - name: model
        - name: context
        - name: eot
        - name: pad
        - name: output
        - name: boundary
        - name: sampling
        - name: reorder
    retryStrategy:
      limit: 1
    container:
      image: "{{workflow.parameters.tokenizer_image}}:{{workflow.parameters.tokenizer_tag}}"
      command: [ "/ko-app/dataset_tokenizer" ]
      args: ["-tokenizer", "{{inputs.parameters.model}}",
             "-context", "{{inputs.parameters.context}}",
             "-eot", "{{inputs.parameters.eot}}",
             "-pad", "{{inputs.parameters.pad}}",
             "-input", "{{inputs.parameters.input}}",
             "-output", "{{inputs.parameters.output}}",
             "-boundary", "{{inputs.parameters.boundary}}",
             "-reorder", "{{inputs.parameters.reorder}}",
             "-sampling", "{{inputs.parameters.sampling}}",
             "-sanitize"]
      resources:
        requests:
          memory: 256Mi
          cpu: "4"
        limits:
          memory: 256Mi
          cpu: "4"
      volumeMounts:
        - mountPath: "/{{workflow.parameters.pvc}}"
          name: "{{workflow.parameters.pvc}}"
    volumes:
      - name: "{{workflow.parameters.pvc}}"
        persistentVolumeClaim:
           claimName: "{{workflow.parameters.pvc}}"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: topology.kubernetes.io/region
              operator: In
              values:
              - "{{workflow.parameters.region}}"

  - name: model-finetuner
    inputs:
      parameters:
        - name: finetuner_params
        - name: wandb_key
        - name: torch_cache
    container:
      image: "{{workflow.parameters.finetuner_image}}:{{workflow.parameters.finetuner_tag}}"
      command: ["/usr/bin/bash", "-c"]
      args: ["/usr/bin/python3 /app/finetuner.py {{inputs.parameters.finetuner_params}}"]
      tty: true
      env:
      - name: WANDB_API_KEY
        value: "{{inputs.parameters.wandb_key}}"
      - name: PYTHONUNBUFFERED
        value: "1"
      - name: TORCH_EXTENSIONS_DIR
        value: "{{inputs.parameters.torch_cache}}"
      resources:
        requests:
          memory: 128Gi
          cpu: "8"
        limits:
          memory: 192Gi
          cpu: "8"
          nvidia.com/gpu: 1
      volumeMounts:
        - mountPath: "/{{workflow.parameters.pvc}}"
          name: "{{workflow.parameters.pvc}}"
    volumes:
      - name: "{{workflow.parameters.pvc}}"
        persistentVolumeClaim:
           claimName: "{{workflow.parameters.pvc}}"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: gpu.nvidia.com/class
                  operator: In
                  values:
                    - "{{workflow.parameters.trainer_gpu}}"
                - key: topology.kubernetes.io/region
                  operator: In
                  values:
                    - "{{workflow.parameters.region}}"

  - name: model-inference-service
    inputs:
      parameters:
        - name: model_path
    resource:
      action: apply
      manifest: |
        apiVersion: serving.kubeflow.org/v1beta1
        kind: InferenceService
        metadata:
          name: inference-{{ workflow.parameters.run_name }}
          annotations:
            autoscaling.knative.dev/scaleToZeroPodRetentionPeriod: 20m
        spec:
          predictor:
            minReplicas: 0
            maxReplicas: 1
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                        - key: gpu.nvidia.com/class
                          operator: In
                          values:
                            - "{{workflow.parameters.inference_gpu}}"
                        - key: topology.kubernetes.io/region
                          operator: In
                          values:
                            - "{{workflow.parameters.region}}"
            containers:
              - name: kfserving-container
                image: "{{workflow.parameters.inference_image}}:{{workflow.parameters.inference_tag}}"
                imagePullPolicy: IfNotPresent
                command:
                  - "python3"
                  - "/inference/huggingface.py"
                env:
                  - name: MODEL_NAME
                    value: "final"
                  - name: MODEL_PRECISION
                    value: "fp16"
                  - name: STORAGE_URI # KFServing mounts the PVC at /mnt/pvc/
                    value: pvc://{{ workflow.parameters.pvc }}/
                  - name: MODEL_PATH
                    value: /mnt/pvc/{{ inputs.parameters.model_path }}
                resources:
                  requests:
                    nvidia.com/gpu: 1
                    cpu: 4
                    memory: 8Gi
                  limits:
                    nvidia.com/gpu: 1
                    cpu: 12
                    memory: 60Gi
